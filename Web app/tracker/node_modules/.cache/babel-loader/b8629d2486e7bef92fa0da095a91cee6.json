{"ast":null,"code":"var _jsxFileName = \"F:\\\\Hackathons\\\\Medicine Supply chain\\\\tracker\\\\src\\\\Components\\\\Tracker\\\\TrackerComp\\\\Camera\\\\camera.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class CameraFeed extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.takePhoto = () => {\n      const {\n        sendFile\n      } = this.props;\n      const context = this.canvas.getContext('2d');\n      context.drawImage(this.videoPlayer, 0, 0, 680, 360);\n      this.canvas.toBlob(sendFile);\n    };\n  }\n\n  /**\r\n   * Processes available devices and identifies one by the label\r\n   * @memberof CameraFeed\r\n   * @instance\r\n   */\n  processDevices(devices) {\n    devices.forEach(device => {\n      console.log(device.label);\n      this.setDevice(device);\n    });\n  }\n  /**\r\n   * Sets the active device and starts playing the feed\r\n   * @memberof CameraFeed\r\n   * @instance\r\n   */\n\n\n  async setDevice(device) {\n    const {\n      deviceId\n    } = device;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        deviceId\n      }\n    });\n    this.videoPlayer.srcObject = stream;\n    this.videoPlayer.play();\n  }\n  /**\r\n   * On mount, grab the users connected devices and process them\r\n   * @memberof CameraFeed\r\n   * @instance\r\n   * @override\r\n   */\n\n\n  async componentDidMount() {\n    const cameras = await navigator.mediaDevices.enumerateDevices();\n    this.processDevices(cameras);\n  }\n  /**\r\n   * Handles taking a still image from the video feed on the camera\r\n   * @memberof CameraFeed\r\n   * @instance\r\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-camera-feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__viewer\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: ref => this.videoPlayer = ref,\n          width: \"240\",\n          heigh: \"120\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.takePhoto,\n        children: \"Capture barcode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__stage\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"680\",\n          height: \"360\",\n          ref: ref => this.canvas = ref\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["F:/Hackathons/Medicine Supply chain/tracker/src/Components/Tracker/TrackerComp/Camera/camera.jsx"],"names":["React","Component","CameraFeed","takePhoto","sendFile","props","context","canvas","getContext","drawImage","videoPlayer","toBlob","processDevices","devices","forEach","device","console","log","label","setDevice","deviceId","stream","navigator","mediaDevices","getUserMedia","audio","video","srcObject","play","componentDidMount","cameras","enumerateDevices","render","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAyCtCE,SAzCsC,GAyC1B,MAAM;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAA1B;AACA,YAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,UAAZ,CAAuB,IAAvB,CAAhB;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkB,KAAKC,WAAvB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,GAA1C,EAA+C,GAA/C;AACA,WAAKH,MAAL,CAAYI,MAAZ,CAAmBP,QAAnB;AACH,KA9CqC;AAAA;;AACtC;AACJ;AACA;AACA;AACA;AACIQ,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpBA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,MAAM,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB;AACA,WAAKC,SAAL,CAAeJ,MAAf;AACH,KAHD;AAIH;AAED;AACJ;AACA;AACA;AACA;;;AACmB,QAATI,SAAS,CAACJ,MAAD,EAAS;AACpB,UAAM;AAAEK,MAAAA;AAAF,QAAeL,MAArB;AACA,UAAMM,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE;AAAEN,QAAAA;AAAF;AAAvB,KAApC,CAArB;AACA,SAAKV,WAAL,CAAiBiB,SAAjB,GAA6BN,MAA7B;AACA,SAAKX,WAAL,CAAiBkB,IAAjB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC2B,QAAjBC,iBAAiB,GAAG;AACtB,UAAMC,OAAO,GAAG,MAAMR,SAAS,CAACC,YAAV,CAAuBQ,gBAAvB,EAAtB;AACA,SAAKnB,cAAL,CAAoBkB,OAApB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AAQIE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BACI;AAAO,UAAA,GAAG,EAAEC,GAAG,IAAK,KAAKvB,WAAL,GAAmBuB,GAAvC;AAA6C,UAAA,KAAK,EAAC,KAAnD;AAAyD,UAAA,KAAK,EAAC;AAA/D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAQ,QAAA,OAAO,EAAE,KAAK9B,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACI;AAAQ,UAAA,KAAK,EAAC,KAAd;AAAoB,UAAA,MAAM,EAAC,KAA3B;AAAiC,UAAA,GAAG,EAAE8B,GAAG,IAAK,KAAK1B,MAAL,GAAc0B;AAA5D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA5DqC","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class CameraFeed extends Component {\r\n    /**\r\n     * Processes available devices and identifies one by the label\r\n     * @memberof CameraFeed\r\n     * @instance\r\n     */\r\n    processDevices(devices) {\r\n        devices.forEach(device => {\r\n            console.log(device.label);\r\n            this.setDevice(device);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the active device and starts playing the feed\r\n     * @memberof CameraFeed\r\n     * @instance\r\n     */\r\n    async setDevice(device) {\r\n        const { deviceId } = device;\r\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: { deviceId } });\r\n        this.videoPlayer.srcObject = stream;\r\n        this.videoPlayer.play();\r\n    }\r\n\r\n    /**\r\n     * On mount, grab the users connected devices and process them\r\n     * @memberof CameraFeed\r\n     * @instance\r\n     * @override\r\n     */\r\n    async componentDidMount() {\r\n        const cameras = await navigator.mediaDevices.enumerateDevices();\r\n        this.processDevices(cameras);\r\n    }\r\n\r\n    /**\r\n     * Handles taking a still image from the video feed on the camera\r\n     * @memberof CameraFeed\r\n     * @instance\r\n     */\r\n    takePhoto = () => {\r\n        const { sendFile } = this.props;\r\n        const context = this.canvas.getContext('2d');\r\n        context.drawImage(this.videoPlayer, 0, 0, 680, 360);\r\n        this.canvas.toBlob(sendFile);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"c-camera-feed\">\r\n                <div className=\"c-camera-feed__viewer\">\r\n                    <video ref={ref => (this.videoPlayer = ref)} width=\"240\" heigh=\"120\" />\r\n                </div>\r\n                <button onClick={this.takePhoto}>Capture barcode</button>\r\n                <div className=\"c-camera-feed__stage\">\r\n                    <canvas width=\"680\" height=\"360\" ref={ref => (this.canvas = ref)} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}